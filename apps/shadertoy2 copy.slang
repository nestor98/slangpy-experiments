// https://github.com/shader-slang/slang/blob/master/examples/shader-toy/shader-toy.slang
// ^ Adapted this removing the interface, which was a lot of bloat for not a lot of functionality
// the final slang will be a sandwich with shadertoy1.slang + user code (beginning of shadertoy2) + shadertoy2.slang

struct ShadertoyWrapper {
    // SPECIFIC DEFINES HERE:
    float2 x_range = float2(0, 10.);
    vec2 CIEXYZ_SPAN;
    vec3 ciexyz[89];
    int CIEXYZ_SAMPLES;

    // this array has to have at least N_WLS wls
    float wl_idx[11] = float[11](
        0.01, // blue
        0.99, // red
        0.33, // green
        .5,   // yellow
        0.6,  // orange
        0.1,
        0.2,
        0.4,
        0.7,
        0.65,
        0.85 // red
    );

    float min_f = 0.9, max_f = 2.; // min and max freq
    float min_twist = -.34, max_twist = -.1;


    // User code will go here and provide the impl for:
    // void mainImage(out float4 fragColor, in float2 fragCoord);

    // ---------------- User Code Starts Here ----------------
    {USER_CODE}
    // ---------------- User Code Ends Here ------------------

    __init() {
        // SPECIFIC INITIALIZATION HERE:
        x_range = float2(0, 10.);

        min_f = 0.9;
        max_f = 2.; // min and max freq
        min_twist = -.34;
        max_twist = -.1;

        // Source http://cvrl.ioo.ucl.ac.uk/index.htm:
        CIEXYZ_SAMPLES = 89;
        CIEXYZ_SPAN = vec2(380.0, 830.0);
        ciexyz = {
            vec3(3.769647E-03, 4.146161E-04, 1.847260E-02),
            vec3(9.382967E-03, 1.059646E-03, 4.609784E-02),
            vec3(2.214302E-02, 2.452194E-03, 1.096090E-01),
            vec3(4.742986E-02, 4.971717E-03, 2.369246E-01),
            vec3(8.953803E-02, 9.079860E-03, 4.508369E-01),
            vec3(1.446214E-01, 1.429377E-02, 7.378822E-01),
            vec3(2.035729E-01, 2.027369E-02, 1.051821E+00),
            vec3(2.488523E-01, 2.612106E-02, 1.305008E+00),
            vec3(2.918246E-01, 3.319038E-02, 1.552826E+00),
            vec3(3.227087E-01, 4.157940E-02, 1.748280E+00),
            vec3(3.482554E-01, 5.033657E-02, 1.917479E+00),
            vec3(3.418483E-01, 5.743393E-02, 1.918437E+00),
            vec3(3.224637E-01, 6.472352E-02, 1.848545E+00),
            vec3(2.826646E-01, 7.238339E-02, 1.664439E+00),
            vec3(2.485254E-01, 8.514816E-02, 1.522157E+00),
            vec3(2.219781E-01, 1.060145E-01, 1.428440E+00),
            vec3(1.806905E-01, 1.298957E-01, 1.250610E+00),
            vec3(1.291920E-01, 1.535066E-01, 9.991789E-01),
            vec3(8.182895E-02, 1.788048E-01, 7.552379E-01),
            vec3(4.600865E-02, 2.064828E-01, 5.617313E-01),
            vec3(2.083981E-02, 2.379160E-01, 4.099313E-01),
            vec3(7.097731E-03, 2.850680E-01, 3.105939E-01),
            vec3(2.461588E-03, 3.483536E-01, 2.376753E-01),
            vec3(3.649178E-03, 4.277595E-01, 1.720018E-01),
            vec3(1.556989E-02, 5.204972E-01, 1.176796E-01),
            vec3(4.315171E-02, 6.206256E-01, 8.283548E-02),
            vec3(7.962917E-02, 7.180890E-01, 5.650407E-02),
            vec3(1.268468E-01, 7.946448E-01, 3.751912E-02),
            vec3(1.818026E-01, 8.575799E-01, 2.438164E-02),
            vec3(2.405015E-01, 9.071347E-01, 1.566174E-02),
            vec3(3.098117E-01, 9.544675E-01, 9.846470E-03),
            vec3(3.804244E-01, 9.814106E-01, 6.131421E-03),
            vec3(4.494206E-01, 9.890228E-01, 3.790291E-03),
            vec3(5.280233E-01, 9.994608E-01, 2.327186E-03),
            vec3(6.133784E-01, 9.967737E-01, 1.432128E-03),
            vec3(7.016774E-01, 9.902549E-01, 8.822531E-04),
            vec3(7.967750E-01, 9.732611E-01, 5.452416E-04),
            vec3(8.853376E-01, 9.424569E-01, 3.386739E-04),
            vec3(9.638388E-01, 8.963613E-01, 2.117772E-04),
            vec3(1.051011E+00, 8.587203E-01, 1.335031E-04),
            vec3(1.109767E+00, 8.115868E-01, 8.494468E-05),
            vec3(1.143620E+00, 7.544785E-01, 5.460706E-05),
            vec3(1.151033E+00, 6.918553E-01, 3.549661E-05),
            vec3(1.134757E+00, 6.270066E-01, 2.334738E-05),
            vec3(1.083928E+00, 5.583746E-01, 1.554631E-05),
            vec3(1.007344E+00, 4.895950E-01, 1.048387E-05),
            vec3(9.142877E-01, 4.229897E-01, 0.000000E+00),
            vec3(8.135565E-01, 3.609245E-01, 0.000000E+00),
            vec3(6.924717E-01, 2.980865E-01, 0.000000E+00),
            vec3(5.755410E-01, 2.416902E-01, 0.000000E+00),
            vec3(4.731224E-01, 1.943124E-01, 0.000000E+00),
            vec3(3.844986E-01, 1.547397E-01, 0.000000E+00),
            vec3(2.997374E-01, 1.193120E-01, 0.000000E+00),
            vec3(2.277792E-01, 8.979594E-02, 0.000000E+00),
            vec3(1.707914E-01, 6.671045E-02, 0.000000E+00),
            vec3(1.263808E-01, 4.899699E-02, 0.000000E+00),
            vec3(9.224597E-02, 3.559982E-02, 0.000000E+00),
            vec3(6.639960E-02, 2.554223E-02, 0.000000E+00),
            vec3(4.710606E-02, 1.807939E-02, 0.000000E+00),
            vec3(3.292138E-02, 1.261573E-02, 0.000000E+00),
            vec3(2.262306E-02, 8.661284E-03, 0.000000E+00),
            vec3(1.575417E-02, 6.027677E-03, 0.000000E+00),
            vec3(1.096778E-02, 4.195941E-03, 0.000000E+00),
            vec3(7.608750E-03, 2.910864E-03, 0.000000E+00),
            vec3(5.214608E-03, 1.995557E-03, 0.000000E+00),
            vec3(3.569452E-03, 1.367022E-03, 0.000000E+00),
            vec3(2.464821E-03, 9.447269E-04, 0.000000E+00),
            vec3(1.703876E-03, 6.537050E-04, 0.000000E+00),
            vec3(1.186238E-03, 4.555970E-04, 0.000000E+00),
            vec3(8.269535E-04, 3.179738E-04, 0.000000E+00),
            vec3(5.758303E-04, 2.217445E-04, 0.000000E+00),
            vec3(4.058303E-04, 1.565566E-04, 0.000000E+00),
            vec3(2.856577E-04, 1.103928E-04, 0.000000E+00),
            vec3(2.021853E-04, 7.827442E-05, 0.000000E+00),
            vec3(1.438270E-04, 5.578862E-05, 0.000000E+00),
            vec3(1.024685E-04, 3.981884E-05, 0.000000E+00),
            vec3(7.347551E-05, 2.860175E-05, 0.000000E+00),
            vec3(5.259870E-05, 2.051259E-05, 0.000000E+00),
            vec3(3.806114E-05, 1.487243E-05, 0.000000E+00),
            vec3(2.758222E-05, 1.080001E-05, 0.000000E+00),
            vec3(2.004122E-05, 7.863920E-06, 0.000000E+00),
            vec3(1.458792E-05, 5.736935E-06, 0.000000E+00),
            vec3(1.068141E-05, 4.211597E-06, 0.000000E+00),
            vec3(7.857521E-06, 3.106561E-06, 0.000000E+00),
            vec3(5.768284E-06, 2.286786E-06, 0.000000E+00),
            vec3(4.259166E-06, 1.693147E-06, 0.000000E+00),
            vec3(3.167765E-06, 1.262556E-06, 0.000000E+00),
            vec3(2.358723E-06, 9.422514E-07, 0.000000E+00),
            vec3(1.762465E-06, 7.053860E-07, 0.000000E+00)
        };
    }
    static This getDefault() { return This(); }
}

ShadertoyWrapper g_shadertoy;

uniform RWTexture2D<float4> g_output;




[shader("compute")]
[numthreads(16, 1, 1)]
[mutating]
void compute_main(
    uint3 sv_dispatchThreadID : SV_DispatchThreadID)
{
    //ShadertoyWrapper toy = ShadertoyWrapper.getDefault();

    float2 fragCoord = float2(sv_dispatchThreadID.xy);
    fragCoord.y = iResolution.y - fragCoord.y - 1; // Flip Y!!!
    float4 fragColor = 0;
    g_shadertoy.mainImage(fragColor, fragCoord);
    
    g_output[sv_dispatchThreadID.xy] = fragColor;
}

